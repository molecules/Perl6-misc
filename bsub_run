#!/bin/env perl6

constant $DEFAULT_MEM         = '5000';
constant $DEFAULT_JOBNAME     = now.posix.floor; # Current time in seconds since POSIX epoch
constant $DEFAULT_CPUs        = 1;

# wrap as a positional parameter
multi MAIN (
    $wrap,
    :$cpu=$DEFAULT_CPUs,
    :$mem=$DEFAULT_MEM,
    :$job=$DEFAULT_JOBNAME,
    :$run=True,
)
{
    MAIN( :$wrap, :$cpu, :$mem, :$job, :$run);
}

# wrap as a named parameter
multi MAIN (
    :$wrap,
    :$cpu=$DEFAULT_CPUs,
    :$mem=$DEFAULT_MEM,
    :$job=$DEFAULT_JOBNAME,
    :$run=True,
)
{
    my $job_script_name = job_script_name_for($job);
    my $batch_code      = batch_code(:$mem, :$cpu, :$wrap, :job($job_script_name), );

    # Write batch file
    spurt($job_script_name, $batch_code);

    if $run
    {
        # Run batch file
        shell("bsub < $job_script_name");
    }
}

# Create the text for a batch script
sub batch_code ( :$wrap, :$cpu, :$mem, :$job, )
{

    return qq:heredoc/END/;
    #!/bin/env bash
    #BSUB -J $job
    #BSUB -o $job.o_%J
    #BSUB -e $job.e_%J
    #BSUB -R "rusage[mem=$mem] span[hosts=1]"
    #BSUB -n $cpu
    $wrap
    END
}

sub replace_nonword_characters ( $name is copy)  # copies can be modified within a subroutine
{
    $name ~~ s:g/\W/_/; # Search globally and replace nonword characters with underscore
    return $name;
}

# Create script name based on the job name
# If needed, make the scriptname versioned to avoid overwriting previous batch files
sub job_script_name_for ( $job )
{
    my $job_name = replace_nonword_characters($job);
    my $version  = 0;
    my $script_name        = "$job_name.bsub";

    while ( $script_name.IO ~~ :e)
    {
        $version++;
        $script_name        = "$job_name.bsub.$version";
    }
    return $script_name;
}
